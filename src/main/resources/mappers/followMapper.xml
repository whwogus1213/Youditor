<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.good.mapper.followMapper">

	<!-- 팔로잉 -->
	<select id="followingList" resultType="FollowingListVO" parameterType="int">
<!-- 	SELECT -->
<!-- 		fo.followAccountId, fo.followerAccountId, ac.nickname -->
<!-- 	FROM -->
<!-- 		followlist as fo -->
<!-- 	JOIN -->
<!-- 		accounts as ac -->
<!-- 	ON -->
<!-- 		fo.followAccountId = ac.accountId -->
<!-- 	WHERE -->
<!-- 		fo.followerAccountId = #{accountId} -->
<!-- 	ORDER BY -->
<!-- 		fo.reg_date DESC -->


	select d.followAccountId, d.followerAccountId, d.nickname, d.reg_date, IFNULL(dd.check,'false') as 'check', d.picture, d.footer, d.lastFollowerCheck, d.newLogin_date
from
(SELECT fo.followAccountId, fo.followerAccountId, ac.nickname, fo.reg_date, ac.picture, ac.footer, ac.lastFollowerCheck, ac.newLogin_date
FROM followlist as fo JOIN accounts as ac ON fo.followAccountId = ac.accountId
WHERE fo.followerAccountId = #{accountId}
ORDER BY fo.reg_date DESC) as d LEFT OUTER JOIN 
(select * , 'true' as 'check'
from (SELECT fo.followAccountId as baseF , fo.followerAccountId as baseFF , ac.nickname as nick, fo.reg_date as foDate
FROM followlist as fo JOIN accounts as ac ON fo.followAccountId = ac.accountId
WHERE fo.followerAccountId = #{accountId}
ORDER BY fo.reg_date DESC)as base, followlist as base2
where base.baseF = base2.followerAccountId and base.baseFF = base2.followAccountId)as dd
ON dd.baseF = d.followAccountId and dd.baseFF = d.followerAccountId
order by d.reg_date desc;
	
    </select>

	<!-- 팔로워 -->
	<select id="followerList" resultType="FollowingListVO" parameterType="int">
	select d.followAccountId, d.followerAccountId, d.nickname, d.reg_date, IFNULL(dd.check,'false') as 'check', d.picture, d.footer, d.lastFollowerCheck, d.newLogin_date
	from
		(SELECT fo.followAccountId, fo.followerAccountId, ac.nickname, fo.reg_date, ac.picture, ac.footer, ac.lastFollowerCheck, ac.newLogin_date
		FROM followlist as fo JOIN accounts as ac ON fo.followerAccountId = ac.accountId
		WHERE fo.followAccountId = #{accountId}
		ORDER BY fo.reg_date DESC) as d LEFT OUTER JOIN 
		(select * , 'true' as 'check'
		from (SELECT fo.followAccountId as baseF , fo.followerAccountId as baseFF , ac.nickname as nick, fo.reg_date as foDate
			FROM followlist as fo JOIN accounts as ac ON fo.followerAccountId = ac.accountId
			WHERE fo.followAccountId = #{accountId}
			ORDER BY fo.reg_date DESC)as base, followlist as base2
			where base.baseF = base2.followerAccountId and base.baseFF = base2.followAccountId)as dd
		ON dd.baseF = d.followAccountId and dd.baseFF = d.followerAccountId
		order by IFNULL(dd.check,'false'), d.reg_date desc;


    </select>
    
    <!-- 맛팔 체크 -->
    <select id="followEachOtherCheck" parameterType="FollowListVO" resultType="int">
    SELECT
    	count(*)
    FROM
    	followlist
    WHERE
    	followAccountId = #{followAccountId}
    	AND
    	followerAccountId = #{followerAccountId}
    </select>

	<!-- 팔로잉 추가 -->
    <insert id="insert" parameterType="FollowListVO">
    	insert into followlist(followAccountId, followerAccountId, reg_date)
		values(#{followAccountId}, #{followerAccountId}, now())
    </insert>

    <!-- 팔로우 취소 -->
    <delete id="delete" parameterType="FollowListVO">
        delete from followlist
        where followAccountId = #{followAccountId} and followerAccountId = #{followerAccountId}
    </delete>
    
    <select id="followCnt" parameterType="int" resultType="int">
		select count(*) from followlist where followAccountId = #{accountId}    
    </select>

    <select id="starCnt" parameterType="int" resultType="int">
	select ifnull(sum(star),0) as starCnt
	from 
		(select accountId, sum(star) as star
		from videostar
		group by accountId
		having accountId = #{accountId}
			union
		select accountId, sum(star) as star
		from tipstar
		group by accountId
		having accountId = #{accountId}) as starfrom;    
    </select>

    <select id="starRank" parameterType="int" resultType="int">
	select ifnull(sum(starRank),0) as starRank
	from(
		select starRank
		from(
			select accountId, star, @rownum:= @rownum+1 as starRank
			from(
				select accountId, sum(star) as star
				from (select * from videostar
					union
				select * from tipstar
				) as unistar
			group by accountId
			order by sum(star) desc) as orderstar, (select @rownum:=0) as initrow
			) as rankb
		where accountId = #{accountId}
		) as checknull;
    </select>
    
</mapper>