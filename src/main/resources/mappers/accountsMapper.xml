<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.good.mapper.accountsMapper">

	<!--
	mybatis-config.xml의 typeAlias에 등록해두지 않았다면
	<select id="selectAccounts" resultType="com.good.dto.AccountsVO" >
		...
	</select>
	이렇게 해야 한다.
	-->

	<!-- 회원 랭킹 리스트 -->
	<select id="selectAccounts" resultType="AccountsVO"
		parameterType="map">
		select accountId, sum(star) as star, nickname ,picture, footer
		from ( (select tbts.accountId, sum(star) as star, ac.nickname, ac.picture, ac.footer
				from (select tb.boardId, tb.accountId, ts.star from tipboard tb, tipstar ts where tb.boardId = ts.boardId) tbts,
						accounts ac where tbts.accountId = ac.accountId group by tbts.accountId)
		                union all (select vbvs.accountId, sum(star) as star, ac.nickname, ac.picture, ac.footer
		                from (select vb.boardId, vb.accountId, vs.star from videoboard vb, videostar vs where vb.boardId = vs.boardId) vbvs,
		                accounts ac where vbvs.accountId = ac.accountId group by vbvs.accountId)) union_vt 
		group by accountId order by star desc limit 5;
	</select>

	<!-- 회원 가입 -->
	<insert id="insertAccounts" parameterType="AccountsVO">
		INSERT INTO
				accounts(
						email,
						pwd,
						nickname,
						picture,
						footer,
						reg_date,
						mod_date,
						lastFollowerCheck,
						newLogin_date
						)
				VALUES(
					#{email},
					#{pwd},
					#{nickname},
					#{picture},
					#{footer},
					now(),
					now(),
					now(),
					now()
					)
	</insert>
	
	<!-- 회원 가입 이메일 인증 check항목 추가 -->
	<insert id="insertAccountCheck" parameterType="AccountCheckVO">
		INSERT INTO
				accountcheck
				VALUES(
					#{accountId},
					#{checkNum}
					)
	</insert>
	
	<select id="duplicateCheck" parameterType="Integer" resultType="Integer">
		SELECT EXISTS(SELECT * FROM accountcheck where checkNum = #{checkNum})	
	</select>
	
	
	
	<!-- 회원가입시 AccountId 리턴 -->
	<select id="returnAccountId" parameterType="AccountsVO" resultType="Integer">
	    SELECT
	      accountId
	    FROM
	      accounts
	    WHERE
	      email = #{email}
	</select>
	
	
	<!-- 이메일 체크 -->
	<select id="checkEmail" parameterType="String" resultType="Integer">
	    SELECT
	      COUNT(*)
	    FROM
	      accounts
	    WHERE
	      email = #{email}
	</select>

	<!-- 닉네임 체크 -->
	<select id="checkNickname" parameterType="String" resultType="Integer">
	    SELECT
	      COUNT(*)
	    FROM
	      accounts
	    WHERE
	      nickname = #{nickname}
	</select>

	<select id="login" resultType="AccountsVO">
		 select * from accounts where email = #{email} and pwd = #{pwd}
	</select>
	
	<delete id="removeUnusedCheckKey" parameterType="int">
		DELETE FROM
			accountcheck
		WHERE
			accountId = #{accountId}
	</delete>
	
	<update id="resetPassword" parameterType="String">
		UPDATE
			accounts
		SET
			pwd = "tempPassword",
			mod_date = now()
		WHERE
			email = #{email}
	</update>
	
	<delete id="deleteAccount" parameterType="AccountsVO">
		UPDATE
			accounts
		SET
			mod_date = now(),
			authority = 0
		WHERE
			accountId = #{accountId}
			AND
			pwd = #{pwd}
	</delete>
	
	<!-- 이메일 인증 확인후 권한 3으로 부여 -->
	<update id="updateAuthority" parameterType="AccountCheckVO">
		UPDATE
			accounts
		SET
			authority = 3
		WHERE
			accountId = #{accountId}
			AND
			(SELECT checkNum FROM accountcheck WHERE accountId = #{accountId}) = #{checkNum}
			
	</update>
	
	<!-- 인증 완료후 삭제 -->
	<delete id="deleteAuthkey" parameterType="AccountCheckVO">
		DELETE FROM accountcheck WHERE accountId = #{accountId}
	</delete>
	
	
	<update id="updateAccount" parameterType="AccountsVO">
		UPDATE
			accounts
		SET
			email = #{email},
			nickname = #{nickname},
			picture = #{picture},
			footer = #{footer},
			mod_date = now()
		WHERE
			accountId = #{accountId}
			AND
			pwd = #{pwd}
	</update>
	
	<update id="updatePassword" parameterType="AccountsVO">
		UPDATE
			accounts
		SET
			pwd = #{pwd},
			mod_date = now()
		WHERE
			accountId = #{accountId}
	</update>
					
	<!-- 로그인시간 -->		
	<update id="loginDate" parameterType="AccountsVO">		
	UPDATE		
		accounts		
	SET		
		newLogin_date = now()		
	WHERE		
		email = #{email}		
		AND		
		pwd = #{pwd}		
	</update>
	<select id="getPwd" resultType="String" parameterType="map">
		select
			pwd
		from
			accounts
		where
			nickname = #{nickname} 
		and
			email = #{email}
	</select>
	<select id="getEmail" resultType="String" parameterType="map">
		select
			email
		from
			accounts
		where
			email = #{email}
	</select>
	<select id="getAccountId" resultType="int" parameterType="map">
		select
			accountId
		from
			accounts
		where
			email = #{email}
	</select>
	<select id="getNickname" resultType="String" parameterType="map">
		select
			nickname
		from
			accounts
		where
			email = #{email}
	</select>
	
	<!-- 비번리셋키 발급 유무 -->
	<select id="findAccountCheckKey" parameterType="int" resultType="int">
		SELECT
			count(*)
		FROM
			accountcheck
		WHERE
			accountId = #{accountId}
	</select>
	
	<!-- 발급된 비번리셋키 존재시 취득 -->
	<select id="getCheckNUm" parameterType="int" resultType="int">
		SELECT
			checkNum
		FROM
			accountcheck
		WHERE
			accountId = #{accountId}
	</select>
	
	<!-- 비번리셋용 1회용 키 발급 -->
	<insert id="insertCheckNum" parameterType="AccountCheckVO">
		INSERT INTO
			accountcheck
		VALUE
			(#{accountId},
			#{checkNum})
	</insert>
	
	<!-- 비번리셋용 키 확인 -->
	<select id="accountCheckCheck" parameterType="AccountCheckVO" resultType="int">
		SELECT
			COUNT(*)
		FROM
			accountcheck
		WHERE
			checkNum = #{checkNum}
			AND
			accountId = #{accountId}
	</select>
	
	<!-- 비전리셋 -->
	<update id="newPassword" parameterType="AccountsVO">
	UPDATE
		accounts
	SET
		pwd = #{pwd}
	WHERE
		accountId= #{accountId}
	</update>
	
	<!-- 비번리셋용 키 파기 -->
	<delete id="removeAccountCheckKey" parameterType="AccountCheckVO">
	DELETE FROM
		accountcheck
	WHERE
		accountId = #{accountId}
		AND
		checkNum = ${checkNum}
	</delete>
	
</mapper>


